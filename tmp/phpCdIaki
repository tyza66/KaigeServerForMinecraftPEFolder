name: EconomySell
main: onebone\economysell\EconomySell
version: "2.0.3"
api:
- 1.3.0
- 1.3.1
- 1.4.0
- 1.4.1
author: onebone
depend: [EconomyAPI]

permissions:
 economysell.*:
  description: Includes all permission for EconomySell
  children:
   economysell.sell.*:
    description: Includes all permission related to managing sell center
    children:
     economysell.sell.create:
      description: Allows player to create sell center
     economysell.sell.remove:
      description: Allows player to remove sell center<?php

namespace onebone\economysell;

use pocketmine\event\block\BlockBreakEvent;
use pocketmine\event\block\SignChangeEvent;
use pocketmine\event\player\PlayerInteractEvent;
use pocketmine\plugin\PluginBase;
use pocketmine\event\Listener;
use pocketmine\event\block\BlockPlaceEvent;
use pocketmine\tile\Sign;
use pocketmine\math\Vector3;
use pocketmine\utils\Config;
use pocketmine\item\Item;
use pocketmine\event\server\DataPacketReceiveEvent;
use pocketmine\network\protocol\EntityDataPacket;
use pocketmine\nbt\NBT;
use pocketmine\nbt\tag\Compound;
use pocketmine\nbt\tag\Int;
use pocketmine\nbt\tag\String;
use onebone\economyapi\EconomyAPI;

#define TAG 1

class EconomySell extends PluginBase implements Listener {
	private $sell;
	private $placeQueue;
	
	/**
	 *
	 * @var Config
	 */
	private $sellSign, $lang;

	public function onEnable(){
		@mkdir($this->getDataFolder());
		$this->sell = (new Config($this->getDataFolder()."Sell.yml", Config::YAML))->getAll();
		$this->getServer()->getPluginManager()->registerEvents($this, $this);
		$this->prepareLangPref();
		$this->placeQueue = array();

		ItemList::$items = (new Config($this->getDataFolder()."items.properties", Config::PROPERTIES, ItemList::$items))->getAll();
	}
	
	public function onDisable(){
		$cfg = new Config($this->getDataFolder()."Sell.yml", Config::YAML);
		$cfg->setAll($this->sell);
		$cfg->save();
	}

	private function prepareLangPref(){
		$this->lang = new Config($this->getDataFolder()."language.properties", Config::PROPERTIES, array(
				"wrong-format" => "Please write your sign with right format",
				"item-not-support" => "Item %1 is not supported on EconomySell",
				"no-permission-create" => "You don't have permission to create sell center",
				"sell-created" => "Sell center has been created (%1 = %MONETARY_UNIT%%2)",
				"removed-sell" => "Sell center has been removed",
				"creative-mode" => "You are in creative mode",
				"no-permission-break" => "You don't have permission to break sell center",
				"tap-again" => "Are you sure to sell %1 (%MONETARY_UNIT%%2)? Tap again to confirm",
				"no-item" => "You have no item to sell",
				"sold-item" => "Has been sold %1 of %2 for %MONETARY_UNIT%%3" 
		));
		
		$this->sellSign = new Config($this->getDataFolder()."SellSign.yml", Config::YAML, array(
				"sell" => array(
						"[SELL]",
						"$%1",
						"%2",
						"Amount : %3" 
				) 
		));
	}
	
	public function getMessage($key, $val = array("%1", "%2", "%3")){
		if ($this->lang->exists($key)){
			return str_replace(array("%MONETARY_UNIT%", "%1","%2", "%3"), array(EconomyAPI::getInstance()->getMonetaryUnit(), $val[0], $val[1], $val[2]),$this->lang->get($key));
		}
		return "There's no message named \"$key\"";
	}
	
	public function onSignChange(SignChangeEvent $event){
		$tag = $event->getLine(0);
		if (($val = $this->checkTag($tag)) !== false){
			$player = $event->getPlayer();
			if (! $player->hasPermission ("economysell.sell.create")){
				$player->sendMessage($this->getMessage("no-permission-create"));
				return;
			}
			if(!is_numeric($event->getLine(1)) or !is_numeric($event->getLine(3))){
				$player->sendMessage($this->getMessage("wrong-format"));
				return;
			}
			$item = $this->getItem($event->getLine(2));
			if ($item === false){
				$player->sendMessage($this->getMessage("item-not-support", array($event->getLine (2),"", "" )));
				return;
			}
			if($item[1] === false){ // Item name found
				$id = explode(":", strtolower($event->getLine(2)));
				$event->setLine(2, $item[0]);
			} else {
				//$tmp = $this->getItem(strtolower($event->getLine(2)));
				$id = explode(":", $item[0]);
			}
			$id[0] = (int) $id[0];
			if (!isset($id[1])){
				$id[1] = 0;
			}
			$itemName = $item[1] === false ? $item[0]:$event->getLine(2);

			$block = $event->getBlock();
			$this->sell[$block->getX().":".$block->getY().":".$block->getZ().":".$player->getLevel()->getName()] = array(
					"x" => $block->getX(),
					"y" => $block->getY(),
					"z" => $block->getZ(),
					"level" => $player->getLevel()->getName(),
					"cost" => (int) $event->getLine (1),
					"item" =>  (int) $id[0],
					"meta" => (int) $id[1],
					"amount" => (int) $event->getLine (3)
			);
			
			$player->sendMessage($this->getMessage("sell-created", [$itemName, (int)$event->getLine(3), ""]));
			
			$event->setLine(0, $val[0]);
			$event->setLine(1, str_replace("%1", $event->getLine(1), $val[1]));
			$event->setLine(2, str_replace("%2", $event->getLine(2), $itemName));
			$event->setLine(3, str_replace("%3", $event->getLine(3), $val[3]));
		}
	}
	
	public function onTouch(PlayerInteractEvent $event){
		$block = $event->getBlock();
		if (isset($this->sell[$block->getX().":".$block->getY().":".$block->getZ().":".$block->getLevel()->getName()])){
			$sell = $this->sell[$block->getX().":".$block->getY().":".$block->getZ().":".$block->getLevel()->getName()];
			$player = $event->getPlayer();
			
			$cnt = 0;
			foreach($player->getInventory()->getContents() as $item){
				if ($item->getID() == $sell["item"] and $item->getDamage() == $sell["meta"]){
					$cnt += $item->getCount();
				}
			}
			if ($cnt >= $sell ["amount"]){
				// $player->getInventory()->removeItem(new Item($sell["item"], $sell["meta"], $sell["amount"]));
				$this->removeItem($player, new Item($sell["item"], $sell["meta"], $sell["amount"]));
				EconomyAPI::getInstance()->addMoney($player, $sell ["cost"], true, "EconomySell");
				$player->sendMessage($this->getMessage("sold-item", array($sell ["amount"], $sell ["item"].":".$sell ["meta"], $sell ["cost"] )));
			} else {
				$player->sendMessage($this->getMessage("no-item"));
			}
			$event->setCancelled(true);
			if ($event->getItem()->isPlaceable()){
				$this->placeQueue [$player->getName()] = true;
			}
		}
	}
	
	public function onPlace(BlockPlaceEvent $event){
		$username = $event->getPlayer()->getName();
		if (isset($this->placeQueue [$username] )){
			$event->setCancelled(true);
			unset($this->placeQueue [$username]);
		}
	}
	
	public function onBreak(BlockBreakEvent $event){
		$block = $event->getBlock();
		if (isset($this->sell[$block->getX().":".$block->getY().":".$block->getZ().":".$block->getLevel()->getName()] )){
			$player = $event->getPlayer();
			if (! $player->hasPermission("economysell.sell.remove" )){
				$player->sendMessage($this->getMessage("no-permission-break"));
				$event->setCancelled(true);
				return;
			}
			$this->sell[$block->getX().":".$block->getY().":".$block->getZ().":".$block->getLevel()->getName()] = null;
			unset($this->sell[$block->getX().":".$block->getY().":".$block->getZ().":".$block->getLevel()->getName()]);
			$player->sendMessage($this->getMessage("removed-sell"));
		}
	}
	public function checkTag($line1){
		foreach($this->sellSign->getAll() as $tag => $val){
			if ($tag == $line1){
				return $val;
			}
		}
		return false;
	}
	
	public function getItem($item){ // gets ItemID and ItemName
		$item = strtolower($item);
		$e = explode(":", $item);
		$e[1] = isset($e[1])? $e[1] : 0;
		if (isset(ItemList::$items [$item] )){
			return array(ItemList::$items [$item], true); // Returns Item ID
		} else {
			foreach(ItemList::$items as $name => $id){
				$explode = explode(":", $id);
				$explode[1] = isset($explode[1])? $explode[1] : 0;
				if ($explode[0] == $e[0] and $explode[1] == $e[1]){
					return array($name, false);
				}
			}
		}
		return false;
	}
	
	public function removeItem($sender, $getitem){
		$getcount = $getitem->getCount();
		if ($getcount <= 0)
			return;
		for($index = 0; $index < $sender->getInventory()->getSize(); $index ++){
			$setitem = $sender->getInventory()->getItem($index);
			if ($getitem->getID() == $setitem->getID() and $getitem->getDamage() == $setitem->getDamage()){
				if ($getcount >= $setitem->getCount()){
					$getcount -= $setitem->getCount();
					$sender->getInventory()->setItem($index, Item::get(Item::AIR, 0, 1));
				} else if ($getcount < $setitem->getCount()){
					$sender->getInventory()->setItem($index, Item::get($getitem->getID(), 0, $setitem->getCount() - $getcount));
					break;
				}
			}
		}
	}
}
<?php

namespace onebone\economysell;

class ItemList{
	public static $items = array(
		"air" => 0,
		"stone" => 1,
		"grassblock" => 2,
		"dirt" => 3,
		"cobblestone" => 4,
		"woodenplank" => 5,
		"treesapling" => 6,
		"firsapling" => "6:1",
		"birchsapling" => "6:2",
		"bedrock" => 7,
		"water" => 8,
		"stationarywater" => 9,
		"lava" => 10,
		"stationarylava" => 11,
		"sand" => 12,
		"gravel" => 13,
		"goldore" => 14,
		"ironore" => 15,
		"coalore" => 16,
		"oaklog" => 17,
		"sideoaklog" => "17:1",
		"birchlog" => "17:2",
		"treeleaf" => "18",
		"oaktreeleaf" => "18:1",
		"birchtreeleaf" => "18:2",
		"sponge" => 19,
		"glass" => 20,
		"lapisore" => 21,
		"lapisblock" => 22,
		"sandstone" => 24,
		"sandstone2" => "24:1",
		"sandstone3" => "24:2",
		"bed" => 26,
		"poweredrail" => 27,
		"cobweb" => 30,
		"bush" => 31,
		"whitewool" => 35,
		"orangewool" => "35:1",
		"magentawool" => "35:2",
		"skywool" => "35:3",
		"yellowwool" => "35:4",
		"greenwool" => "35:5",
		"pinkwool" => "35:6",
		"greywool" => "35:7",
		"greywool2" => "35:8",
		"bluishwool" => "35:9",
		"purplewool" => "35:10",
		"bluewool" => "35:11",
		"brownwool" => "35:12",
		"greenwool2" => "35:13",
		"redwool" => "35:14",
		"blackwool" => "35:15",
		"yellowflower" => 37,
		"poppy" => 38,
		"brownmushroom" => 39,
		"redmushroom" => 40,
		"goldblock" => 41,
		"ironblock" => 42,
		"stonefoothold" => 43,
		"sandfoothold" => "43:1",
		"woodfoothold" => "43:2",
		"cobblefoothold" => "43:3",
		"brickfoothold" => "43:4",
		"stonefoothold2" => "43:6",
		"halfstone" => 44,
		"halfsand" => "44:1",
		"halfwood" => "44:2",
		"halfcobble" => "44:3",
		"halfbrick" => "44:4",
		"halfstone2" => "44:6",
		"brick" => 45,
		"tnt" => 46,
		"bookshelf" => 47,
		"mossstone" => 48,
		"obsidian" => 49,
		"torch" => 50,
		"fire" => 51,
		"woodstair" => 53,
		"chest" => 54,
		"diamondore" => 56,
		"diamondblock" => 57,
		"craftingtable" => 58,
		"crop" => 59,
		"farmland" => 60,
		"furnace" => 61,
		"signblock" => 63,
		"burningfurnace" => 62,
		"woodendoor" => 64,
		"ladder" => 65,
		"cobblestair" => 67,
		"wallsign" => 68,
		"irondoor" => 71,
		"redstoneore" => 73,
		"glowredstone" => 74,
		"snow" => 78,
		"ice" => 79,
		"snowblock" => 80,
		"cactus" => 81,
		"clayblock" => 82,
		"sugarcane" => 83,
		"fence" => 85,
		"pumpkin" => 86,
		"netherrack" => 87,
		"glowingstone" => 89,
		"jack-o-lanton" => 91,
		"cake" => 92,
		"invisiblebedrock" => 95,
		"trapdoor" => 96,
		"stonebrick" => 98,
		"mossbrick" => "98:1",
		"crackedbrick" => "98:2",
		"brownshroomblock" => 99,
		"redshroomblock" => 100,
		"ironbars" => 101,
		"flatglass" => 102,
		"watermelon" => 103,
		"vines" => 106,
		"fencegate" => 107,
		"brickstair" => 108,
		"stonestair" => 109,
		"mycelium" => 110,
		"lilypad" => 111,
		"netherbrick" => 112,
		"netherbrickstair" => 114,
		"endportalframe" => 120,
		"endstone" => 121,
		"cocoa" => 127,
		"sandstair" => 128,
		"emeraldore" => 129,
		"emeraldblock" => 133,
		"cobblestonewall" => 139,
		"growingcarrot" => 141,
		"growingpotato" => 142,
		"quartzblock" => 155,
		"softquartz" => "155:1",
		"pilliarquartz" => "155:2",
		"quartzstair" => 156,
		"whiteclay" => 159,
		"orangeclay" => "159:1",
		"magentaclay" => "159:2",
		"skyclay" => "159:3",
		"yellowclay" => "159:4",
		"greenclay" => "159:5",
		"pinkclay" => "159:6",
		"greyclay" => "159:7",
		"greyclay2" => "159:8",
		"bluishclay" => "159:9",
		"purpleclay" => "159:10",
		"blueclay" => "159:11",
		"brownclay" => "159:12",
		"greenclay2" => "159:13",
		"redclay" => "159:14",
		"blackclay" => "159:15",
		"haybale" => 170,
		"carpet" => 171,
		"coalblock" => 173,
		"podzol" => 243,
		"beetroot" => 244,
		"stonecutter" => 245,
		"glowingobsidian" => 246,
		"nethercore" => 247,
		"updateblock1" => 248,
		"updateblock2" => 249,
		"errorgrass" => 253,
		"errorleaves" => 254,
		"errorstone" => 255,
		"ironshovel" => 256,
		"ironpickaxe" => 257,
		"ironaxe" => 258,
		"flintandsteel" => 259,
		"apple" => 260,
		"bow" => 261,
		"arrow" => 262,
		"coal" => 263,
		"charcoal" => "263:1",
		"diamond" => 264,
		"ironingot" => 265,
		"goldingot"=> 266,
		"ironsword" => 267,
		"woodsword" => 268,
		"woodshovel" => 269,
		"woodpickaxe" => 270,
		"woodaxe" => 271,
		"stonesword" => 272,
		"stoneshovel" => 273,
		"stonepickaxe" => 274,
		"stoneaxe" => 275,
		"diamondsword" => 276,
		"diamondshovel" => 277,
		"diamondpickaxe" => 278,
		"diamondaxe" => 279,
		"stick" => 280,
		"bowl" => 281,
		"mushroomstew" => 282,
		"goldsword" => 283,
		"goldshovel" => 284,
		"goldpickaxe" => 285,
		"goldaxe" => 286,
		"web" => 287,
		"feather" => 288,
		"gunpowder" => 289,
		"woodhoe" => 290,
		"stonehoe" => 291,
		"ironhoe" => 292,
		"diamondhoe" => 293,
		"goldhoe" => 294,
		"seed" => 295,
		"wheat" => 296,
		"bread" => 297,
		"leatherhat" => 298,
		"leatherarmor" => 299,
		"leatherpants" => 300,
		"leatherboots" => 301,
		"chairhat" => 302,
		"chainchestplate" => 303,
		"chainlegging" => 304,
		"chainboots" => 305,
		"ironhelmet" => 306,
		"ironchestplate" => 307,
		"ironlegging"=> 308,
		"ironboots" => 309,
		"diamondhelmet" => 310,
		"diamondchestplate" => 311,
		"diamondlegging" => 312,
		"diamondboots" => 313,
		"goldhelmet" => 314,
		"goldchestplate" => 315,
		"goldlegging" => 316,
		"goldboots" => 317,
		"flint" => 318,
		"rawpork" => 319,
		"pork" => 320,
		"paint" => 321,
		"sign" => 323,
		"door" => 324,
		"bucket" => 325,
		"waterbucket" => 326,
		"minecart" => 328,
		"irondoor" => 330,
		"redstone" => 331,
		"snowball" => 332,
		"boat" => 333,
		"leather" => 334,
		"claybrick" => 336,
		"clay" => 337,
		"sugarcane" => 338,
		"paper" => 339,
		"book" => 340,
		"slimeball" => 341,
		"egg" => 344,
		"compass" => 345,
		"clock" => 347,
		"glowstone" => 348,
		"ink" => 351,
		"redrose" => "351:1",
		"greencactus" => "351:2",
		"cocoabean" => "351:3",
		"lapislazuli" => "351:4",
		"cotton" => "351:5",
		"bluish" => "351:6",
		"lightgrey" => "351:7",
		"grey" => "351:8",
		"pink" => "351:9",
		"lightgreen" => "351:10",
		"yellow" => "351:11",
		"sky" => "351:12",
		"magenta"=> "351:13",
		"orange" => "351:14",
		"bonemeal" => "351:15",
		"bone" => 352,
		"sugar" => 353,
		"cake" => 354,
		"bed" => 355,
		"cookie" => 357,
		"shears" => 359,
		"melon" => 360,
		"pumpkinseed" => 361,
		"melonseed" => 362,
		"rawbeef" => 363,
		"steak" => 364,
		"rawchicken" => 365,
		"chicken" => 366,
		"spawnegg" => 383,
		"emerald" => 388,
		"carrot" => 391,
		"potato" => 392,
		"bakedpotato" => 393,
		"pumpkinpie" => 400,
		"netherbrick" => 405,
		"netherquartz" => 406,
		"camera" => 456,
		"beetroot" => 457,
		"beetrootseed" => 458,
		"beetrootsoup" => 459
);
}
